[
  {
    "from": "@/components/core/Button.tsx",
    "name": "Button",
    "as": "CoreButton"
  },
  {
    "from": "@/components/layout/Footer.tsx",
    "name": "Footer",
    "as": "LayoutFooter"
  },
  {
    "from": "@/components/layout/Loader.tsx",
    "name": "Loader",
    "as": "LayoutLoader"
  },
  {
    "from": "@/components/ui/Button.tsx",
    "name": "Button",
    "as": "UiButton"
  },
  {
    "from": "@/layouts/AdminLayout.tsx",
    "name": "AdminLayout",
    "as": "LayoutsAdminLayout"
  },
  {
    "from": "@/layouts/HomeLayout.tsx",
    "name": "HomeLayout",
    "as": "LayoutsHomeLayout"
  },
  {
    "from": "react",
    "name": "useState",
    "as": "useState"
  },
  {
    "from": "react",
    "name": "useCallback",
    "as": "useCallback"
  },
  {
    "from": "react",
    "name": "useMemo",
    "as": "useMemo"
  },
  {
    "from": "react",
    "name": "useEffect",
    "as": "useEffect"
  },
  {
    "from": "react",
    "name": "useRef",
    "as": "useRef"
  },
  {
    "from": "react",
    "name": "useContext",
    "as": "useContext"
  },
  {
    "from": "react",
    "name": "useReducer",
    "as": "useReducer"
  },
  {
    "from": "react",
    "name": "useImperativeHandle",
    "as": "useImperativeHandle"
  },
  {
    "from": "react",
    "name": "useDebugValue",
    "as": "useDebugValue"
  },
  {
    "from": "react",
    "name": "useDeferredValue",
    "as": "useDeferredValue"
  },
  {
    "from": "react",
    "name": "useLayoutEffect",
    "as": "useLayoutEffect"
  },
  {
    "from": "react",
    "name": "useTransition",
    "as": "useTransition"
  },
  {
    "from": "react",
    "name": "startTransition",
    "as": "startTransition"
  },
  {
    "from": "react",
    "name": "useSyncExternalStore",
    "as": "useSyncExternalStore"
  },
  {
    "from": "react",
    "name": "useInsertionEffect",
    "as": "useInsertionEffect"
  },
  {
    "from": "react",
    "name": "useId",
    "as": "useId"
  },
  {
    "from": "react",
    "name": "lazy",
    "as": "lazy"
  },
  {
    "from": "react",
    "name": "memo",
    "as": "memo"
  },
  {
    "from": "react",
    "name": "createRef",
    "as": "createRef"
  },
  {
    "from": "react",
    "name": "forwardRef",
    "as": "forwardRef"
  },
  {
    "from": "react-router",
    "name": "useOutletContext",
    "as": "useOutletContext"
  },
  {
    "from": "react-router",
    "name": "useHref",
    "as": "useHref"
  },
  {
    "from": "react-router",
    "name": "useInRouterContext",
    "as": "useInRouterContext"
  },
  {
    "from": "react-router",
    "name": "useLocation",
    "as": "useLocation"
  },
  {
    "from": "react-router",
    "name": "useNavigationType",
    "as": "useNavigationType"
  },
  {
    "from": "react-router",
    "name": "useNavigate",
    "as": "useNavigate"
  },
  {
    "from": "react-router",
    "name": "useOutlet",
    "as": "useOutlet"
  },
  {
    "from": "react-router",
    "name": "useParams",
    "as": "useParams"
  },
  {
    "from": "react-router",
    "name": "useResolvedPath",
    "as": "useResolvedPath"
  },
  {
    "from": "react-router",
    "name": "useRoutes",
    "as": "useRoutes"
  },
  {
    "name": "default",
    "as": "useDarkMode",
    "from": "C:/Users/kathik/Kathir/Practice/React/vite-react-ts-starter/src/hooks/useDarkMode.ts",
    "__source": "dir"
  },
  {
    "name": "default",
    "as": "useDirection",
    "from": "C:/Users/kathik/Kathir/Practice/React/vite-react-ts-starter/src/hooks/useDirection.ts",
    "__source": "dir"
  }
]